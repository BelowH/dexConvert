@page "/"
@using dexConvert.Domains.ApiModels
@using dexConvert.Services
@using MudBlazor
@inject IMangaService MangaService
@inject NavigationManager NavigationManager
@inject IPreferenceService PreferenceService

<MudGrid>
    <MudItem xs="12"  Class="d-flex justify-center">
        <PageTitle>Dex Convert</PageTitle>
    </MudItem>
    @if (_searchResults == null || !_searchResults.Any())
    {
        <MudItem xs="12" Class="align-content-center">
            <MudGrid>
                <MudItem Class="d-flex align-center justify-center mud-width-full" xs="12">
                    <MudHidden Breakpoint="Breakpoint.MdAndDown">
                        <MudImage Src="logo.png" Width="256" Height="256"></MudImage>
                    </MudHidden>
                </MudItem>
                <MudItem xs="12">
                    <MudText Align="Align.Center" Typo="Typo.h5" Class="ma-4">
                        Easily convert your favorite <MudLink Typo="Typo.h5" Href="https://mangadex.org">MangaDex</MudLink> manga into <b style="color: #40A4FF">.cbz</b> or <b style="color: #40A4FF">PDF</b> files.<br/>
                        Simply enter the manga title in the search bar below, and start downloading!
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudItem>
    }
    <MudItem xs="12">
        <MudStack Row="true" Class="pa-2">
            <MudTextField T="string" @bind-value="_searchText" Label="Search Manga" Variant="Variant.Outlined" HelperTextOnFocus="true" HelperText="e.g.: Attack on Titan" TextChanged="() => _hasTextChanged = true"></MudTextField>
            <MudButton Variant="Variant.Outlined" Disabled="_loading" Color="Color.Primary" OnClick="LoadManga" Style="height: 60px">
                @if(_loading)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    <MudText>Loading</MudText>
                }
                else
                {
                    <MudText>Search</MudText>
                }
            </MudButton>
        </MudStack>
    </MudItem>

    <MudItem xs="12">
        @if(_errorMessage != null)
        {
            <MudAlert Severity="Severity.Warning">@_errorMessage</MudAlert>
        }
        @if (_errorMessage == null && _searchResults != null)
        {
            @if (_searchResults.Count > 0)
            {
                <MudGrid Class="mb-16" Style="align-content: center">
                    <MudItem xs="12">
                        <MudText Typo="Typo.h5">Search Results for: @_searchText</MudText>
                    </MudItem>
                    @foreach (Manga manga in _searchResults)
                    {
                        <MudItem xs="6" sm="4" md="4" lg="3" Class="mt-4" Style=" display: flex;">
                            <MudGrid Spacing="1">
                                <MudItem xs="12" Class="mx-2" Style=" display: flex;">
                                    <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
                                        <MudImage Src="@manga.CoverLink" Height="300" Class="rounded-lg" ObjectPosition="ObjectPosition.Center" ObjectFit="ObjectFit.Cover"></MudImage>
                                    </MudHidden>
                                    <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
                                        <MudImage Src="@manga.CoverLink" Height="400" Class="rounded-lg" ObjectPosition="ObjectPosition.Center" ObjectFit="ObjectFit.Cover"></MudImage>
                                    </MudHidden>
                                </MudItem>
                                <MudItem xs="12" Class="mx-2">
                                    <MudText Typo="Typo.h6">@manga.Attributes!.Title!.GetLocalizedTitle(PreferenceService.GetLangPreferenceForSearch())</MudText>
                                </MudItem>
                                <MudItem xs="12" Class="ma-2 mt-auto">
                                    <MudButton Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.DoubleArrow" Color="Color.Primary" OnClick="() => NavigateToManga(manga)">Convert</MudButton >
                                </MudItem>
                            </MudGrid>
                            <!--<MudCard>
                                <MudCardMedia Image="@manga.CoverLink"></MudCardMedia>
                                <MudCardContent Style="min-height: 100px">
                                    <MudText Typo="Typo.subtitle1">@manga.Attributes!.Title!.GetLocalizedTitle(PreferenceService.GetLangPreferenceForSearch())</MudText>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.DoubleArrow" Color="Color.Primary" OnClick="() => NavigateToManga(manga)">Convert</MudButton >
                                </MudCardActions>
                            </MudCard>-->
                        </MudItem>
                    }
                    <MudItem xs="12" Class="d-flex align-center justify-center mud-width-full">
                        <MudButton Variant="Variant.Filled" Disabled="@(!_loadingMore || _loading)" Color="Color.Primary" OnClick="LoadMore">
                            @if (_loading)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true"/>
                                <MudText>Loading</MudText>
                            }
                            else
                            {
                                <MudText>Load More</MudText>
                            }
                        </MudButton>
                    </MudItem>
                </MudGrid>
            }
            else if (!_loading)
            {
                <MudAlert Severity="Severity.Info">No results found</MudAlert>
            }
        }
    </MudItem>
</MudGrid>

@code
{
    

    private bool _loading;
    
    private bool _loadingMore = true;
    
    private bool _hasTextChanged = false;

    private List<Manga>? _searchResults;

    private string? _errorMessage;
    
    private string _searchText = "";

    private int _offset = 0;
    
    private bool DeepSearch 
    {
        set => PreferenceService.SetDeepSearch(value);
        get => PreferenceService.GetDeepSearch();
    }

    protected override void OnInitialized()
    {
        _searchResults = MangaService.GetSearch();
    }


    private async Task LoadManga()
    {
        try
        {
            _loading = true;
            if (string.IsNullOrWhiteSpace(_searchText))
            {
                throw new Exception("Search text cannot be empty");
            }
            if (_hasTextChanged || _searchResults == null)
            {
                _offset = 0;
                _searchResults = new List<Manga>();
                _hasTextChanged = false;
            }
            else if (_offset == 0 && !_hasTextChanged)
            {
                _loading = false;
                return;
            }
            (IList<Manga> manga, int total) results = await MangaService.SearchMangaByTitle(_searchText,_offset);
            _searchResults.AddRange(results.manga);
            if (_searchResults.Count == results.total || results.total <= _offset)
            {
                _loadingMore = false;
            }
            else
            {
                _loadingMore = true;
            }
            _loading = false;
            StateHasChanged();
        } 
        catch (Exception e)
        {
            _errorMessage = e.Message;
            _loading = false;
        }
    }
    
    private async Task LoadMore()
    {
        _offset += 9;
        await LoadManga();
    }
    
    private void NavigateToManga(Manga manga)
    {
        NavigationManager.NavigateTo($"/Manga/{manga.Id}");
    }
    
}
