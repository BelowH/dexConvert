@page "/Manga/{Id}"
@using dexConvert.Domains.ApiModels
@using dexConvert.Services
@using MudBlazor
@using dexConvert.Domains
@using dexConvert.Helper
@using System.Globalization
@using dexConvert.Worker
@using static dexConvert.Domains.EnumCollection
@inject IMangaService MangaService
@inject NavigationManager NavigationManager
@inject IPreferenceService PreferenceService
@inject IDownloadWorker DownloadWorker


<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

</style>
<MudOverlay @bind-Visible="_popupOpen" DarkBackground="true" AutoClose="false">
    <Downloader OnComplete="@DownloaderFinished" OnAbort="@DownloaderFinished" @ref="downloader"></Downloader>
</MudOverlay>
@if (_loading)
{
    <MudGrid>
        <MudItem Class="d-flex flex-column align-center justify-center mud-width-full" xs="12">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true"/>
        </MudItem>
    </MudGrid>
}
else
{
    <MudGrid Class="mb-16">
        <MudItem xs="12">
            @if(_manga is not null)
            {
                <MudGrid Class="pa-2">
                    <MudItem xs="3">
                        <MudImage Src="@_manga.CoverLink" Height="256">
                            
                        </MudImage>
                    </MudItem>
                    <MudItem xs="9">
                        <MudText Typo="Typo.h4" Align="Align.Left">
                            @_manga.Attributes?.Title?.GetLocalizedTitle(PreferenceService.GetLangPreferenceForSearch())
                        </MudText>
                        <MudText Typo="Typo.body1" Align="Align.Left">
                            @_manga.Attributes?.Description?.GetLocalizedTitle(PreferenceService.GetLangPreferenceForSearch())
                        </MudText>
                    </MudItem>
                </MudGrid>
            }
            else
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
                    Failed to load manga
                </MudAlert>
            }
        </MudItem>
        <MudItem xs="12">
            @if (_loadedChapters is {Count: > 0 })
            {
                <MudTable Hover="true" 
                          Breakpoint="Breakpoint.Sm"
                          FixedHeader="true"
                          Items="_loadedChapters" 
                          GroupBy="_groupDefinition"
                          MultiSelection="false">
                    <GroupHeaderTemplate>
                        <MudTh Class="mud-table-cell-custom-group" colspan="1">
                            @($"{context.GroupName}: {context.Key}")
                        </MudTh>
                        <MudTh Class="mud-table-cell-custom-group" colspan="2"></MudTh>
                        <MudTh Class="mud-table-cell-custom-group" colspan="1">
                            <MudStack Row="true">
                                 <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.MenuBook" OnClick="() => DownloadVolume(context.Key.ToString(), DownloadType.CBZ)">Download .cbz</MudButton>
                                 <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.PictureAsPdf" OnClick="() => DownloadVolume(context.Key.ToString(), DownloadType.PDF)">Download .pdf</MudButton>
                            </MudStack>
                        </MudTh>
                    </GroupHeaderTemplate>
                    <RowTemplate>
                        <MudTd>Chapter @(context.Attributes.Chapter ?? "Unknown")</MudTd>
                        <MudTd>@(context.Attributes.Title ?? "Unknown")</MudTd>
                        <MudTd>@(context.Attributes.TranslatedLanguage ?? "Unknown")</MudTd>
                        <MudTd>
                            <MudStack Row="true">
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary"  StartIcon="@Icons.Material.Filled.MenuBook" OnClick="() => DownloadChapter(context.Id, context.Attributes.Chapter!, DownloadType.CBZ)">Download .cbz</MudButton>    
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary"  StartIcon="@Icons.Material.Filled.PictureAsPdf" OnClick="() => DownloadChapter(context.Id, context.Attributes.Chapter!, DownloadType.PDF)">Download .pdf</MudButton>    
                            </MudStack>
                            
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
            else
            {
                <MudAlert Severity="Severity.Info" Variant="Variant.Filled">
                    No volumes or chapters found.
                </MudAlert>
            }
        </MudItem>
    </MudGrid>    
}


@code {
    [Parameter]
    public string? Id { get; set; }
    
    private Manga? _manga;
    
    private bool _loading = true;
    
    private bool _popupOpen = false;
    
    private List<Chapter> _loadedChapters = new List<Chapter>();
    
    private Downloader downloader;
    
    private Guid _selectedChapterId = Guid.Empty;
    
    private readonly TableGroupDefinition<Chapter> _groupDefinition = new TableGroupDefinition<Chapter>
    {
        GroupName = "Volume",
        Indentation = true,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (c) => c.Attributes.Volume ?? "Unknown"
    };

    protected override async Task OnInitializedAsync()
    {
        PreferenceService.OnPreferenceChanged += OnLangChanged;
        _manga = MangaService.GetFromCache(Guid.Parse(Id!));
        _loadedChapters = await MangaService.GetChapters(Guid.Parse(Id!), PreferenceService.GetLangPreferenceForSearch(), PreferenceService.GetDeepSearch());
        _loadedChapters = _loadedChapters
            .OrderBy(o => o.Attributes.Chapter?.Length ?? int.MaxValue)
            .ThenBy(o => o.Attributes.Chapter ?? "Unknown")
            .ToList();
        _loading = false;
    }

    private async void OnLangChanged(object? sender, string e)
    {
        _loading = true;
        StateHasChanged();
        _loadedChapters = await MangaService.GetChapters(Guid.Parse(Id!), PreferenceService.GetLangPreferenceForSearch());
        _loadedChapters = _loadedChapters
            .OrderBy(o => o.Attributes.Chapter?.Length ?? int.MaxValue)
            .ThenBy(o => o.Attributes.Chapter ?? "Unknown")
            .ToList();
        _loading = false;
        StateHasChanged();
    }
    
    private async void DownloadChapter(Guid chapterId, string chapterNumber, DownloadType downloadType)
    {
        _popupOpen = true;
        await Task.Delay(100);
        downloader.Activate(DownloadWorker,chapterId,_manga!.Attributes!.Title!.GetLocalizedTitle(PreferenceService.GetLangPreferenceForSearch()), chapterNumber, downloadType);
    }
    
    private async void DownloadVolume(string? volumeNumber, DownloadType downloadType)
    {
        _popupOpen = true;
        await Task.Delay(100);
        List<Guid> chapters = _loadedChapters.Where(c => c.Attributes.Volume == volumeNumber).Select( c => c.Id).ToList();
        downloader.Activate(DownloadWorker, chapters, _manga!.Attributes!.Title!.GetLocalizedTitle(PreferenceService.GetLangPreferenceForSearch()), volumeNumber!, downloadType);
        
    }

    private void DownloaderFinished()
    {
        _popupOpen = false;
        StateHasChanged();
    }
    
}