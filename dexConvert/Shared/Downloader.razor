@using MudBlazor;
@using dexConvert.Worker
@using dexConvert.Domains
@inject IJSRuntime JS
<MudPaper>
    @if (string.IsNullOrWhiteSpace(_errorMessage))
    {
        

    
        <MudGrid  Class="d-flex justify-center">
            @if (_downloading)
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.h4" Align="Align.Center"> Downloading @(_volumeDownload ? "Volume" : "Chapter") @_identifier</MudText>
                </MudItem>
                <MudItem xs="12">
                    @if (_volumeDownload)
                    {
                        <MudStack Class="pa-2">
                            <MudText Typo="Typo.h6" Align="Align.Center">@_infoText</MudText>
                            <MudProgressLinear Value="_totalProgress" Class="px-2" Color="Color.Primary" Rounded="true" Size="Size.Large"></MudProgressLinear>
                        </MudStack>
                    }
                    else
                    {
                        <MudStack Class="pa-2">
                            <MudText Typo="Typo.h6" Align="Align.Center">@_infoText</MudText>
                            <MudProgressLinear Indeterminate="true" Class="px-2" Color="Color.Primary" Rounded="true" Size="Size.Large"></MudProgressLinear>
                        </MudStack>
                    }
                </MudItem>
            }
            else
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.h4" Align="Align.Center">
                        <MudIcon Icon="@Icons.Material.Filled.Celebration"></MudIcon> Download Completed !<MudIcon Icon="@Icons.Material.Filled.Celebration"></MudIcon>
                    </MudText>
                </MudItem>
            }
            
            @if(_missingPages > 0)
            {
                <MudItem xs="12" Class="ma-4">
                    <MudAlert  Class="d-flex align-center justify-center" Severity="Severity.Warning"> dexConvert was not able to fetch @_missingPages Page(s), the chapter may be incomplete.</MudAlert>
                </MudItem>
            }
            @if (_downloading)
            {
                <MudItem xs="12" Class="d-flex align-center justify-center">
                    <MudButton OnClick="Abort" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel">Cancel Download</MudButton>
                </MudItem>
            }
            else
            {
                <MudItem xs="12" Class="d-flex align-center justify-center">
                    <MudButton OnClick="Complete" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.DownloadDone" Color="Color.Primary">Done</MudButton>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <MudAlert Class="ma-4" Severity="Severity.Error"> An error occurred while downloading or converting this chapter, if you think this is a bug please consider reporting it! </MudAlert>
    }

</MudPaper>



@code {


    private Guid _chapterId;

    private string? _mangaName;

    private string? _identifier;

    [Parameter]
    public Action? OnAbort { get; set; }
    
    [Parameter]
    public Action? OnComplete { get; set; }
    
    private int _progress = 0;
    
    private string _errorMessage = string.Empty;
    
    private bool _downloading = true;
    
    private bool _inputDisabled = true;
    
    private bool _volumeDownload = false;
    
    private int _totalProgress = 0;
    
    private bool _cbzConversionProcessing = false;

    private bool _pdfConversionProcessing = false;
    
    private int _missingPages = 0;

    private string _infoText = "Download Progress";
    
    private DownloadedChapter? _downloadedChapter;

    private List<DownloadedChapter?>? _downloadedChapters;

    private CancellationTokenSource  _cancellationToken = new CancellationTokenSource();
    
    
    public async void Activate(IDownloadWorker downloadWorker,Guid chapterId, string mangaName, string chapterName, EnumCollection.DownloadType downloadType)
    {
        try
        {
            _chapterId = chapterId;
            _mangaName = mangaName;
            _identifier = chapterName;
            _downloading = true;
            _missingPages = 0;
            _errorMessage = string.Empty;
            downloadWorker.OnChapterProgressChanged += (_, i) =>
            {
                _progress = i;
                StateHasChanged();
            };
            downloadWorker.PageNotFound += (_, _) =>
            {
                _missingPages++;
                StateHasChanged();
            };
            downloadWorker.OnChapterCompleted += async (_, _) =>
            {
                switch (downloadType)
                {
                    case EnumCollection.DownloadType.CBZ:
                        await DownloadCbz();
                        break;
                    case EnumCollection.DownloadType.PDF:
                        await DownloadPdf();
                        break;
                    default:
                        throw new ArgumentOutOfRangeException(nameof(downloadType), downloadType, null);
                }
                _downloading = false;
                _inputDisabled = false;
                StateHasChanged();
            };
            _downloadedChapter = await downloadWorker.DownloadChapter(_chapterId,_cancellationToken.Token ,false);
            
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            StateHasChanged();
        }
    }
    
    public async Task Activate(IDownloadWorker downloadWorker,List<Guid> chapterIds, string mangaName, string volumeName, EnumCollection.DownloadType downloadType)
    {
        try
        {
            
            _mangaName = mangaName;
            _identifier = volumeName;
            _downloading = true;
            _missingPages = 0;
            _errorMessage = string.Empty;
            _volumeDownload = true;
            downloadWorker.OnTotalCompleted += async (_, _) =>
            {
                switch (downloadType)
                {
                    case EnumCollection.DownloadType.CBZ:
                        await DownloadCbz();
                        break;
                    case EnumCollection.DownloadType.PDF:
                        await DownloadPdf();
                        break;
                    default:
                        throw new ArgumentOutOfRangeException(nameof(downloadType), downloadType, null);
                }
                _downloading = false;
                _inputDisabled = false;
                StateHasChanged();
            };
            downloadWorker.OnTotalProgressChanged += (_, i) =>
            {
                _totalProgress = i;
                StateHasChanged();
            };
            downloadWorker.OnChapterProgressChanged += (_, i) =>
            {
                _progress = i;
                StateHasChanged();
            };
            downloadWorker.PageNotFound += (_, _) =>
            {
                _missingPages++;
                StateHasChanged();
            };
            
            _downloadedChapters = await downloadWorker.DownloadListOfChapters(chapterIds,_cancellationToken.Token ,false);
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            StateHasChanged();
        }
    }


    private async Task DownloadPdf()
    {
        try
        {
            _pdfConversionProcessing = true;
            _inputDisabled = true;
            _infoText = "Converting to .pdf";
            StateHasChanged();
            await Task.Delay(50);
            string fileName;
            Stream pdf;
            if (_volumeDownload)
            {
                fileName = $"{_mangaName}_V_{_identifier}.pdf";
                pdf = new MemoryStream(PdfService.ConvertToPdf(_downloadedChapters!));
            }
            else
            {
                fileName = $"{_mangaName}_Ch_{_identifier}.pdf";
                pdf = new MemoryStream( PdfService.ConvertToPdf(_downloadedChapter!));
            }
            using DotNetStreamReference streamRef = new DotNetStreamReference(pdf);
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            _cbzConversionProcessing = false;
            _inputDisabled = false;
            StateHasChanged();
            await pdf.DisposeAsync();
        }
        catch
            (Exception e)
        {
            Console.WriteLine(e);
            _errorMessage = e.Message;
            StateHasChanged();
        }
    }

    private async Task DownloadCbz()
    {
        try
        {
            _cbzConversionProcessing = true;
            _inputDisabled = true;
            _infoText = "Converting to .cbz";
            StateHasChanged();
            await Task.Delay(50);
            string fileName;
            Stream cbz;
            if (_volumeDownload)
            {
                fileName = $"{_mangaName}_V_{_identifier}.cbz";
                cbz = await CbzService.ConvertToCbz(_downloadedChapters!, _cancellationToken.Token);
            }
            else
            {
                
                fileName = $"{_mangaName}_Ch_{_identifier}.cbz";
                cbz = await CbzService.ConvertToCbz(_downloadedChapter!, _cancellationToken.Token);
            }
            using DotNetStreamReference streamRef = new DotNetStreamReference(cbz);
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            _cbzConversionProcessing = false;
            _inputDisabled = false;
            StateHasChanged();
            
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            StateHasChanged();
        }
    }
    
    private void Complete() => OnComplete?.Invoke();
    
    private void Abort()
    {
        _cancellationToken.Cancel();
        OnAbort?.Invoke();
    }

}